// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.0
// source: goca/v1/cert.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCertCASignCSR = "/goca.v1.Cert/CASignCSR"
const OperationCertCSR = "/goca.v1.Cert/CSR"
const OperationCertGenKey = "/goca.v1.Cert/GenKey"
const OperationCertGetCert = "/goca.v1.Cert/GetCert"
const OperationCertPKCS12 = "/goca.v1.Cert/PKCS12"
const OperationCertRevokeCert = "/goca.v1.Cert/RevokeCert"

type CertHTTPServer interface {
	CASignCSR(context.Context, *CASignCSRRequest) (*CASignCSRResponse, error)
	CSR(context.Context, *CSRRequest) (*CSRResponse, error)
	GenKey(context.Context, *GenKeyRequest) (*GenKeyResponse, error)
	GetCert(context.Context, *CertRequest) (*CertResponse, error)
	PKCS12(context.Context, *PKCS12Request) (*PKCS12Response, error)
	RevokeCert(context.Context, *RevokeCertRequest) (*RevokeCertResponse, error)
}

func RegisterCertHTTPServer(s *http.Server, srv CertHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/cert/genkey", _Cert_GenKey0_HTTP_Handler(srv))
	r.POST("/v1/cert/csr", _Cert_CSR0_HTTP_Handler(srv))
	r.GET("/v1/cert/{common}", _Cert_GetCert0_HTTP_Handler(srv))
	r.POST("/v1/cert/casigncsr", _Cert_CASignCSR0_HTTP_Handler(srv))
	r.GET("/v1/cert/revokecert", _Cert_RevokeCert0_HTTP_Handler(srv))
	r.POST("/v1/cert/revokecert", _Cert_RevokeCert1_HTTP_Handler(srv))
	r.POST("/v1/cert/pkcs12", _Cert_PKCS120_HTTP_Handler(srv))
}

func _Cert_GenKey0_HTTP_Handler(srv CertHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenKeyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCertGenKey)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenKey(ctx, req.(*GenKeyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenKeyResponse)
		return ctx.Result(200, reply)
	}
}

func _Cert_CSR0_HTTP_Handler(srv CertHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CSRRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCertCSR)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CSR(ctx, req.(*CSRRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CSRResponse)
		return ctx.Result(200, reply)
	}
}

func _Cert_GetCert0_HTTP_Handler(srv CertHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CertRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCertGetCert)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCert(ctx, req.(*CertRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CertResponse)
		return ctx.Result(200, reply)
	}
}

func _Cert_CASignCSR0_HTTP_Handler(srv CertHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CASignCSRRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCertCASignCSR)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CASignCSR(ctx, req.(*CASignCSRRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CASignCSRResponse)
		return ctx.Result(200, reply)
	}
}

func _Cert_RevokeCert0_HTTP_Handler(srv CertHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RevokeCertRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCertRevokeCert)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RevokeCert(ctx, req.(*RevokeCertRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RevokeCertResponse)
		return ctx.Result(200, reply)
	}
}

func _Cert_RevokeCert1_HTTP_Handler(srv CertHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RevokeCertRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCertRevokeCert)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RevokeCert(ctx, req.(*RevokeCertRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RevokeCertResponse)
		return ctx.Result(200, reply)
	}
}

func _Cert_PKCS120_HTTP_Handler(srv CertHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PKCS12Request
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCertPKCS12)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PKCS12(ctx, req.(*PKCS12Request))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PKCS12Response)
		return ctx.Result(200, reply)
	}
}

type CertHTTPClient interface {
	CASignCSR(ctx context.Context, req *CASignCSRRequest, opts ...http.CallOption) (rsp *CASignCSRResponse, err error)
	CSR(ctx context.Context, req *CSRRequest, opts ...http.CallOption) (rsp *CSRResponse, err error)
	GenKey(ctx context.Context, req *GenKeyRequest, opts ...http.CallOption) (rsp *GenKeyResponse, err error)
	GetCert(ctx context.Context, req *CertRequest, opts ...http.CallOption) (rsp *CertResponse, err error)
	PKCS12(ctx context.Context, req *PKCS12Request, opts ...http.CallOption) (rsp *PKCS12Response, err error)
	RevokeCert(ctx context.Context, req *RevokeCertRequest, opts ...http.CallOption) (rsp *RevokeCertResponse, err error)
}

type CertHTTPClientImpl struct {
	cc *http.Client
}

func NewCertHTTPClient(client *http.Client) CertHTTPClient {
	return &CertHTTPClientImpl{client}
}

func (c *CertHTTPClientImpl) CASignCSR(ctx context.Context, in *CASignCSRRequest, opts ...http.CallOption) (*CASignCSRResponse, error) {
	var out CASignCSRResponse
	pattern := "/v1/cert/casigncsr"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCertCASignCSR))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CertHTTPClientImpl) CSR(ctx context.Context, in *CSRRequest, opts ...http.CallOption) (*CSRResponse, error) {
	var out CSRResponse
	pattern := "/v1/cert/csr"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCertCSR))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CertHTTPClientImpl) GenKey(ctx context.Context, in *GenKeyRequest, opts ...http.CallOption) (*GenKeyResponse, error) {
	var out GenKeyResponse
	pattern := "/v1/cert/genkey"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCertGenKey))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CertHTTPClientImpl) GetCert(ctx context.Context, in *CertRequest, opts ...http.CallOption) (*CertResponse, error) {
	var out CertResponse
	pattern := "/v1/cert/{common}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCertGetCert))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CertHTTPClientImpl) PKCS12(ctx context.Context, in *PKCS12Request, opts ...http.CallOption) (*PKCS12Response, error) {
	var out PKCS12Response
	pattern := "/v1/cert/pkcs12"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCertPKCS12))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CertHTTPClientImpl) RevokeCert(ctx context.Context, in *RevokeCertRequest, opts ...http.CallOption) (*RevokeCertResponse, error) {
	var out RevokeCertResponse
	pattern := "/v1/cert/revokecert"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCertRevokeCert))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
